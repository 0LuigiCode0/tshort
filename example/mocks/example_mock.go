// Code generated by T-Short v0.1.0 DO NOT EDIT
package examplemock

import (
	"fmt"
	"reflect"
	"testing"
	
	_test1_ "github.com/0LuigiCode0/tshort/example/test1" 
)

type iCall interface {
	getName() string
	getOut(i int) any
	check(name string, params ...any)
}

type call struct {
	name string
	in   []any
	out  []any
}

func (c *call) getName() string {
	return c.name
}
func (c *call) check(name string, params ...any) {
	if c.name != name {
		panic(fmt.Sprintf( "%s: call was expected",c.name ))
	}
	if len(c.in) != len(params) {
		panic(fmt.Sprintf("%s: the number of parameters does not match",c.name))
	}
	for i, in := range c.in {
		if !reflect.DeepEqual(in, params[i]) {
			panic(fmt.Sprintf("%s: parameters of index %d does not match: get %v expect %v",name, i, in, params[i]))
		}
	}
}
func (c *call) getOut(i int) any {
	return c.out[i]
}

// -------------------------------------------------------------------------- //
// MARK:Doo
// -------------------------------------------------------------------------- //

type CallersDoo struct {
	c []iCall
}


type _Doo struct {
	callers *CallersDoo
}

func NewDoo(t *testing.T) *_Doo {
	return &_Doo{callers: &CallersDoo{c: make([]iCall, 0, 4)}}
}
func (m *_Doo) EXPECT() *CallersDoo {
	return m.callers
}
func (m *_Doo) Interceptor(t *testing.T) {
	m.clean()
	m.checkCallers()
}

func (m *_Doo) next() iCall {
	if len(m.callers.c) > 0 {
		c := m.callers.c[0]
		m.callers.c = m.callers.c[1:]
		return c
	}
	return nil
}
func (m *_Doo) checkCallers() {
	if len(m.callers.c) > 0 {
		var msg string
		for _, call := range m.callers.c {
			msg += call.getName() + ": call was expected\n"
		}
		panic(msg)
	}
}
func (m *_Doo) clean() {
	m.callers.c = make([]iCall, 0, 4)
}


// Block A(_in0 *int,_in1 int,_in2 []byte) (_out0 _test1_.INT,_out1 error)----------------------

func (m *_Doo) A(_in0 *int,_in1 int,_in2 []byte) (_out0 _test1_.INT,_out1 error) {
	if call := m.next(); call != nil {
		call.check("A",_in0,_in1,_in2)
		_out0,_ = call.getOut(0).(_test1_.INT)
		_out1,_ = call.getOut(1).(error)
		return
	}
	panic("A: unexpected function is called")
}

type _A struct {
	call
}

func (c *CallersDoo) A(_in0 *int,_in1 int,_in2 []byte) *_A {
	_c := new(_A)
	_c.name = "A"
	_c.in = append(_c.in, _in0,_in1,_in2)
	c.c = append(c.c, _c)
	return _c
}

func (_c *_A) Return(_out0 _test1_.INT,_out1 error) *_A {
	_c.out = append(_c.out, _out0,_out1)
	return _c
}

// Block B() ()----------------------

func (m *_Doo) B() () {
	if call := m.next(); call != nil {
		call.check("B",)
		return
	}
	panic("B: unexpected function is called")
}

type _B struct {
	call
}

func (c *CallersDoo) B() *_B {
	_c := new(_B)
	_c.name = "B"
	c.c = append(c.c, _c)
	return _c
}
